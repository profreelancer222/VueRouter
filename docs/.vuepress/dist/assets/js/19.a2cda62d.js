(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{233:function(t,n,s){"use strict";s.r(n);var a=s(0),e=Object(a.a)({},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("div",{staticClass:"content"},[t._m(0),t._m(1),s("p",[t._v("路由对象是不可变 (immutable) 的，每次成功的导航后都会产生一个新的对象。")]),s("p",[t._v("路由对象出现在多个地方:")]),t._m(2),t._m(3),t._m(4),t._m(5),s("ul",[s("li",[t._m(6),s("p",[t._v("当前路由的名称，如果有的话。(查看"),s("router-link",{attrs:{to:"../essentials/named-routes.html"}},[t._v("命名路由")]),t._v(")")],1)]),s("li",[t._m(7),s("p",[t._v("如果存在重定向，即为重定向来源的路由的名字。(参阅"),s("router-link",{attrs:{to:"../essentials/redirect-and-alias.html"}},[t._v("重定向和别名")]),t._v(")")],1)])])])},[function(){var t=this.$createElement,n=this._self._c||t;return n("h1",{attrs:{id:"路由信息对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#路由信息对象","aria-hidden":"true"}},[this._v("#")]),this._v(" 路由信息对象")])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[this._v("一个"),n("strong",[this._v("路由对象 (route object)")]),this._v(" 表示当前激活的路由的状态信息，包含了当前 URL 解析得到的信息，还有 URL 匹配到的"),n("strong",[this._v("路由记录 (route records)")]),this._v("。")])},function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ul",[s("li",[s("p",[t._v("在组件内，即 "),s("code",[t._v("this.$route")])])]),s("li",[s("p",[t._v("在 "),s("code",[t._v("$route")]),t._v(" 观察者回调内")])]),s("li",[s("p",[s("code",[t._v("router.match(location)")]),t._v(" 的返回值")])]),s("li",[s("p",[t._v("导航守卫的参数：")]),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("router"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("beforeEach")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("to"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("from")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{attrs:{class:"token comment"}},[t._v("// `to` 和 `from` 都是路由对象")]),t._v("\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),s("li",[s("p",[s("code",[t._v("scrollBehavior")]),t._v(" 方法的参数:")]),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" router "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{attrs:{class:"token class-name"}},[t._v("VueRouter")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{attrs:{class:"token function"}},[t._v("scrollBehavior")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("to"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token keyword"}},[t._v("from")]),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" savedPosition"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n")])])])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[this._v("// "),n("code",[this._v("to")]),this._v(" 和 "),n("code",[this._v("from")]),this._v(" 都是路由对象\n}\n})")])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v("\n## 路由信息对象的属性\n\n- **$route.path**\n\n- 类型: `string`\n\n  字符串，对应当前路由的路径，总是解析为绝对路径，如 `\"/foo/bar\"`。\n\n- **$route.params**\n\n- 类型: `Object`\n\n一个 key/value 对象，包含了动态片段和全匹配片段，如果没有路由参数，就是一个空对象。\n\n- **$route.query**\n\n- 类型: `Object`\n\n  一个 key/value 对象，表示 URL 查询参数。例如，对于路径 `/foo?user=1`，则有 `$route.query.user == 1`，如果没有查询参数，则是个空对象。\n\n- **$route.hash**\n\n- 类型: `string`\n\n  当前路由的 hash 值 (带 `#`) ，如果没有 hash 值，则为空字符串。\n\n- **$route.fullPath**\n\n- 类型: `string`\n\n  完成解析后的 URL，包含查询参数和 hash 的完整路径。\n\n- **$route.matched**\n\n- 类型: `Array<RouteRecord>`\n\n一个数组，包含当前路由的所有嵌套路径片段的**路由记录** 。路由记录就是 `routes` 配置数组中的对象副本 (还有在 `children` 数组)。\n\n``` js\nconst router = new VueRouter({\n  routes: [\n    // 下面的对象就是路由记录\n    { path: '/foo', component: Foo,\n      children: [\n        // 这也是个路由记录\n        { path: 'bar', component: Bar }\n      ]\n    }\n  ]\n})\n")])])])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[this._v("当 URL 为 "),n("code",[this._v("/foo/bar")]),this._v("，"),n("code",[this._v("$route.matched")]),this._v(" 将会是一个包含从上到下的所有对象 (副本)。")])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[n("strong",[this._v("$route.name")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("p",[n("strong",[this._v("$route.redirectedFrom")])])}],!1,null,null,null);n.default=e.exports}}]);